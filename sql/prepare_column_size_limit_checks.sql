-- This script creates a schema and table for variable size types and datasets that use up the maximum size for that
-- datatype.
DROP SCHEMA IF EXISTS EXASOL_CT_MAX_COLUMN_SIZE CASCADE;

CREATE SCHEMA EXASOL_CT_MAX_COLUMN_SIZE;

OPEN SCHEMA EXASOL_CT_MAX_COLUMN_SIZE;

CREATE TABLE READ_CHARACTER (
    C_CHAR_MAX CHAR(2000),
    C_VARCHAR_MAX VARCHAR(2000000)
);

CREATE TABLE WRITE_CHARACTER LIKE READ_CHARACTER;

CREATE TABLE READ_NUMERIC (
    C_DECIMAL_INT_MAX DECIMAL(36,0),
    C_DECIMAL_SCALE_MAX DECIMAL(36,36)
);

CREATE TABLE WRITE_NUMERIC LIKE READ_NUMERIC;

INSERT INTO READ_NUMERIC VALUES(-999999999999999999999999999999999999, -0.000000000000000000000000000000000001);
INSERT INTO READ_NUMERIC VALUES(-999999999999999999999999999999999999, -0.999999999999999999999999999999999999);
INSERT INTO READ_NUMERIC VALUES(123456789012345678901234567890123456, 0.123456789012345678901234567890123456);
INSERT INTO READ_NUMERIC VALUES(999999999999999999999999999999999999, 0.000000000000000000000000000000000001);
INSERT INTO READ_NUMERIC VALUES(999999999999999999999999999999999999, 0.999999999999999999999999999999999999);

SELECT * FROM READ_NUMERIC;

CREATE OR REPLACE SCRIPT fill_char_columns() AS
    function get_printable_ascii_string_of_length(len)
        local FIRST_CHAR_CODE = 33
        local LAST_CHAR_CODE = 126
        local CHAR_CODES = LAST_CHAR_CODE - FIRST_CHAR_CODE + 1
        local text = {}
        for i = 1, len do
             text[#text + 1] = string.char(((i - 1) % CHAR_CODES) + FIRST_CHAR_CODE)
        end
        return table.concat(text, "")
    end
    local MAX_CHAR_LEN = 2000
    local MAX_VARCHAR_LEN = 2000000
    query(
        [[INSERT INTO READ_CHARACTER VALUES (:c, :v)]],
        { c = get_printable_ascii_string_of_length(MAX_CHAR_LEN),
          v = get_printable_ascii_string_of_length(MAX_VARCHAR_LEN)
        }
    );

EXECUTE SCRIPT fill_char_columns() WITH OUTPUT;